package com.raos.fx.controls.models;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

import com.raos.fx.controls.models.occurance.Occurance;
import com.raos.fx.controls.skin.SchedulerSkin;

import javafx.beans.property.ListPropertyBase;
import javafx.collections.FXCollections;

/**
 * Tasks or the event for the Scheduler. Designed to incorporate the basic things of a task
 * 
 * <h1>Task Design</h1>
 * 
 * Design of the class includes
 * <ul>
 * <li>Name</li>
 * <li>Description</li>
 * <li>Occurrence</li>
 * <li>Priority</li>
 * <li>Subtasks</li>
 * </ul>
 *
 * @author Raos
 */
public class Task implements Transformable<Map<String, Object>> {
	private String name, description;
	private Occurance occurance;
	private Priority priority;
	private final List<SubTask> subTasks = new ListPropertyBase<SubTask>(FXCollections.observableArrayList()) {

		protected void invalidated() {
			// in the case that a sub task is removed
			// we must also alter the subtasks parent if the parent is not this
			subTasks.stream().filter(e -> e.getParentTask() == null || !e.getParentTask().equals(Task.this))
					// Mapping the object to the subtask
					.mapToInt(subTasks::indexOf).forEach(i -> {
						// if the parent task of the subtask is not null then remove it from its former parent
						if (subTasks.get(i).getParentTask() != null) {
							subTasks.get(i).getParentTask().getSubTasks().remove(subTasks.get(i));
						}
						// then set it parent to this
						subTasks.get(i).setParentTask(Task.this);
					});
		}

		@Override
		public Object getBean() {
			return Task.this;
		}

		@Override
		public String getName() {
			return "subTasks";
		}
	};

	/**
	 * Constructs the Task object
	 */
	public Task() {
	}

	/**
	 * @return name
	 */
	public final String getName() {
		return name;
	}

	/**
	 * @param name - to be set
	 */
	public final void setName(String name) {
		this.name = name;
	}

	/**
	 * @return description
	 */
	public final String getDescription() {
		return description;
	}

	/**
	 * @param description - to be set
	 */
	public final void setDescription(String description) {
		this.description = description;
	}

	/**
	 * @return occurance
	 */
	public final Occurance getOccurance() {
		return occurance;
	}

	/**
	 * @param occurance - to be set
	 */
	public final void setOccurance(Occurance occurance) {
		this.occurance = occurance;
	}

	/**
	 * @return priority
	 */
	public final Priority getPriority() {
		return priority;
	}

	/**
	 * @param priority - to be set
	 */
	public final void setPriority(Priority priority) {
		this.priority = priority;
	}

	/**
	 * @return subTasks
	 */
	public final List<SubTask> getSubTasks() {
		return subTasks;
	}

	/**
	 * @param scheduler - The Scheduler Skin
	 * @return the node representation of this task
	 */
	public final TaskNode toNode(SchedulerSkin scheduler) {
		return new TaskNode(scheduler, this);
	}

	/**
	 * Transforms to a {@link Map} object
	 */
	@Override
	public Map<String, Object> transformTo(
			Map<String, Object> list) {
		Map<String, Object> map = Optional.ofNullable(list).orElseGet(HashMap::new);
		map.put("Name", name);
		map.put("Description", description);
		map.put("Priority", priority);
		map.put("Occurance", occurance.transformTo(null));
		map.put("Sub Tasks", subTasks.stream().map(e -> e.transformTo(null)).collect(Collectors.toList()));
		return map;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public Transformable<Map<String, Object>> transformFrom(Map<String, Object> t) {
		name = (String) t.get("Name");
		description = (String) t.get("Description");
		priority = (Priority) t.get("Priority");
		occurance.transformFrom((Map<String, Object>) t.get("Occurance"));
		subTasks.clear();
		subTasks.addAll((List<SubTask>) t.get("Sub Tasks"));
		return this;
	}

	@Override
	public int hashCode() {
		// autogenerated by eclipse
		return Objects.hash(description, name, occurance, priority, subTasks);
	}

	@Override
	public boolean equals(Object obj) {
		// autogenerated by eclipse
		if (this == obj) {
			return true;
		}
		if (!(obj instanceof Task)) {
			return false;
		}
		Task other = (Task) obj;
		return Objects.equals(description, other.description) && Objects.equals(name, other.name)
				&& Objects.equals(occurance, other.occurance) && priority == other.priority
				&& Objects.equals(subTasks, other.subTasks);
	}

}
